From 65b713b9001a4fd988501161d49704c6f46ca207 Mon Sep 17 00:00:00 2001
From: Alexey Mylnikov <alexey.mylnikov@playrix.com>
Date: Fri, 15 Mar 2019 15:48:09 +0300
Subject: [PATCH] test

---
 .gitignore              |  1 +
 Include/opcode.h        |  2 ++
 Lib/opcode.py           |  2 ++
 Python/ceval.c          | 19 +++++++++++++++++++
 Python/opcode_targets.h |  2 +-
 Python/peephole.c       | 11 ++++++++++-
 6 files changed, 35 insertions(+), 2 deletions(-)

diff --git a/.gitignore b/.gitignore
index de25253df8..cfabfe0534 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,6 +15,7 @@
 *.profclang?
 *.profraw
 *.dyn
+.idea
 Doc/build/
 Doc/tools/docutils/
 Doc/tools/jinja2/
diff --git a/Include/opcode.h b/Include/opcode.h
index 9ed548729e..c4a96c1219 100644
--- a/Include/opcode.h
+++ b/Include/opcode.h
@@ -159,6 +159,8 @@ extern "C" {
 #define SET_ADD         146
 #define MAP_ADD         147
 
+#define LOAD_OTUS       150
+
 
 enum cmp_op {PyCmp_LT=Py_LT, PyCmp_LE=Py_LE, PyCmp_EQ=Py_EQ, PyCmp_NE=Py_NE, PyCmp_GT=Py_GT, PyCmp_GE=Py_GE,
 	     PyCmp_IN, PyCmp_NOT_IN, PyCmp_IS, PyCmp_IS_NOT, PyCmp_EXC_MATCH, PyCmp_BAD};
diff --git a/Lib/opcode.py b/Lib/opcode.py
index e403365b6a..faafd7616c 100644
--- a/Lib/opcode.py
+++ b/Lib/opcode.py
@@ -189,4 +189,6 @@ EXTENDED_ARG = 145
 def_op('SET_ADD', 146)
 def_op('MAP_ADD', 147)
 
+def_op('LOAD_OTUS', 150)
+
 del def_op, name_op, jrel_op, jabs_op
diff --git a/Python/ceval.c b/Python/ceval.c
index e1140a8e40..c707bbb9c0 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -1244,6 +1244,25 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
             FAST_DISPATCH();
         }
 
+        TARGET(LOAD_OTUS)
+        {
+            x = GETLOCAL(0);
+            if (x != NULL) {
+                Py_INCREF(x);
+                PUSH(x);
+            } else {
+                format_exc_check_arg(PyExc_UnboundLocalError,
+                                     UNBOUNDLOCAL_ERROR_MSG,
+                                     PyTuple_GetItem(co->co_varnames, oparg));
+                break;
+            }
+
+            x = GETITEM(consts, oparg);
+            Py_INCREF(x);
+            PUSH(x);
+            FAST_DISPATCH();
+        }
+
         PREDICTED_WITH_ARG(STORE_FAST);
         TARGET(STORE_FAST)
         {
diff --git a/Python/opcode_targets.h b/Python/opcode_targets.h
index 95eb127a15..20dde517c4 100644
--- a/Python/opcode_targets.h
+++ b/Python/opcode_targets.h
@@ -149,7 +149,7 @@ static void *opcode_targets[256] = {
     &&TARGET_MAP_ADD,
     &&_unknown_opcode,
     &&_unknown_opcode,
-    &&_unknown_opcode,
+    &&TARGET_LOAD_OTUS,
     &&_unknown_opcode,
     &&_unknown_opcode,
     &&_unknown_opcode,
diff --git a/Python/peephole.c b/Python/peephole.c
index 11f6f8861c..d1b90612f8 100644
--- a/Python/peephole.c
+++ b/Python/peephole.c
@@ -410,7 +410,16 @@ PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,
                 SETARG(codestr, i, j);
                 cumlc = lastlc + 1;
                 break;
-
+                /* OTUS homework optimization */
+            case LOAD_FAST:
+                if (GETARG(codestr, i) != 0
+                    || codestr[i+3] != LOAD_CONST)
+                    continue;
+                j = GETARG(codestr, i+3);
+                codestr[i+3] = LOAD_OTUS;
+                SETARG(codestr, i+3, j);
+                memset(codestr+i, NOP, 3);
+                break;
                 /* Skip over LOAD_CONST trueconst
                    POP_JUMP_IF_FALSE xx. This improves
                    "while 1" performance. */
-- 
2.21.0

